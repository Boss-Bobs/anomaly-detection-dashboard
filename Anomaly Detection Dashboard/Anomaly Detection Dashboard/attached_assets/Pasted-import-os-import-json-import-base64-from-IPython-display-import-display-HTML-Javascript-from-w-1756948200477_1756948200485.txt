import os
import json
import base64
from IPython.display import display, HTML, Javascript
from web3 import Web3

# Configuration
anomaly_dir = "/kaggle/working/DeepEYE_processed_data/results_ucsd/annotated_anomalies_ucsd"
WEB3_PROVIDER = "https://sepolia.infura.io/v3/8742554fd5c94c549cb8b4117b076e7a"
CONTRACT_ADDRESS = "0x279FcACc1eB244BBD7Be138D34F3f562Da179dd5"

# CONTRACT_ABI from your original code
CONTRACT_ABI = [
    {
        "inputs": [
            {"internalType": "string", "name": "_folder", "type": "string"},
            {"internalType": "uint256", "name": "_frameIdx", "type": "uint256"},
            {"internalType": "string", "name": "_error", "type": "string"}
        ],
        "name": "logAnomaly",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
        "name": "anomalies",
        "outputs": [
            {"internalType": "string", "name": "folder", "type": "string"},
            {"internalType": "uint256", "name": "frameIdx", "type": "uint256"},
            {"internalType": "string", "name": "error", "type": "string"}
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [{"internalType": "uint256", "name": "index", "type": "uint256"}],
        "name": "getAnomaly",
        "outputs": [
            {"internalType": "string", "name": "", "type": "string"},
            {"internalType": "uint256", "name": "", "type": "uint256"},
            {"internalType": "string", "name": "", "type": "string"}
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getAnomalyCount",
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [{"internalType": "address", "name": "", "type": "address"}],
        "stateMutability": "view",
        "type": "function"
    }
]

def image_to_base64(filepath):
    """Converts an image file to a Base64 encoded string."""
    try:
        with open(filepath, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
        return f"data:image/jpeg;base64,{encoded_string}"
    except FileNotFoundError:
        return ""

# Load and encode anomaly images
anomaly_files = [f for f in os.listdir(anomaly_dir) if f.endswith('.jpg')]
anomaly_images_base64 = {f: image_to_base64(os.path.join(anomaly_dir, f)) for f in anomaly_files}

# Connect to blockchain and fetch transaction data
try:
    w3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER))
    if not w3.is_connected():
        raise Exception("Failed to connect to Sepolia")
    contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=CONTRACT_ABI)
    anomaly_count_blockchain = contract.functions.getAnomalyCount().call()
    tx_logs = []
    for i in range(anomaly_count_blockchain):
        folder, frame_idx, error = contract.functions.getAnomaly(i).call()
        tx_logs.append({"folder": folder, "frame": frame_idx, "error": error, "timestamp": "2025-09-04 01:19"})
except Exception as e:
    print(f"Error fetching blockchain data: {e}")
    tx_logs = []
    anomaly_count_blockchain = 0


# Generate HTML with embedded JavaScript
html_content = f"""
<style>
    .thumbnail-container {{
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }}
    .thumbnail {{
      width: 100px;
      height: auto;
      cursor: pointer;
      border: 2px solid transparent;
      transition: border-color 0.2s;
    }}
    .thumbnail:hover {{
      border-color: #3b82f6;
    }}
</style>
<div class="container mx-auto p-4 max-w-4xl">
  <h1 class="text-3xl font-bold text-center text-orange-600 mb-6">Anomaly Dashboard</h1>
  <div class="flex justify-around mb-6">
    <button id="showAnomalyBtn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Show Anomaly Images</button>
    <button id="showCountBtn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Show Anomaly Count</button>
    <button id="showTxHistoryBtn" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">Show Transaction History</button>
  </div>
  <div id="anomalyDisplay" class="bg-white p-4 rounded-lg shadow-lg mb-6 hidden">
    <h2 class="text-xl font-semibold text-teal-600 mb-2">Anomaly Images</h2>
    <div id="thumbnailList" class="thumbnail-container mb-4"></div>
    <img id="mainAnomalyImage" src="" alt="Anomaly Snapshot" class="w-full rounded-lg border-2 border-teal-300">
  </div>
  <div id="countDisplay" class="bg-white p-4 rounded-lg shadow-lg mb-6 hidden">
    <h2 class="text-xl font-semibold text-teal-600 mb-2">Anomaly Count</h2>
    <p id="anomalyCount" class="text-lg text-orange-600">0</p>
  </div>
  <div id="txHistoryDisplay" class="bg-white p-4 rounded-lg shadow-lg mb-6 hidden">
    <h2 class="text-xl font-semibold text-teal-600 mb-2">Transaction History</h2>
    <ul id="txHistory" class="list-disc pl-5 text-gray-700"></ul>
  </div>
</div>
"""
# This displays the HTML first
display(HTML(html_content))

# This is the crucial part: Injecting the JavaScript separately
js_content = f"""
    const anomalyImages = {json.dumps(anomaly_images_base64)};
    const anomalyCount = Object.keys(anomalyImages).length;
    const txLogs = {json.dumps(tx_logs)};

    // Helper function to hide all displays
    function hideAllDisplays() {{
        document.getElementById('anomalyDisplay').classList.add('hidden');
        document.getElementById('countDisplay').classList.add('hidden');
        document.getElementById('txHistoryDisplay').classList.add('hidden');
    }}

    document.getElementById('showAnomalyBtn').addEventListener('click', () => {{
        hideAllDisplays();
        document.getElementById('anomalyDisplay').classList.remove('hidden');

        const thumbnailList = document.getElementById('thumbnailList');
        thumbnailList.innerHTML = '';
        
        if (anomalyCount > 0) {{
            for (const filename in anomalyImages) {{
                const img = document.createElement('img');
                img.src = anomalyImages[filename];
                img.alt = filename;
                img.title = filename;
                img.classList.add('thumbnail');
                img.addEventListener('click', () => {{
                    document.getElementById('mainAnomalyImage').src = anomalyImages[filename];
                }});
                thumbnailList.appendChild(img);
            }}
            const firstImageFilename = Object.keys(anomalyImages)[0];
            document.getElementById('mainAnomalyImage').src = anomalyImages[firstImageFilename];
        }}
    }});

    document.getElementById('showCountBtn').addEventListener('click', () => {{
        hideAllDisplays();
        document.getElementById('countDisplay').classList.remove('hidden');
        document.getElementById('anomalyCount').textContent = txLogs.length; // Use txLogs.length for on-chain count
    }});

    document.getElementById('showTxHistoryBtn').addEventListener('click', () => {{
        hideAllDisplays();
        document.getElementById('txHistoryDisplay').classList.remove('hidden');
        const txList = document.getElementById('txHistory');
        txList.innerHTML = '';
        txLogs.forEach(log => {{
            const li = document.createElement('li');
            li.textContent = `${{log.folder}} Frame ${{log.frame}} - Error: ${{log.error}} (${{log.timestamp}})`;
            txList.appendChild(li);
        }});
    }});
"""
# Inject the JavaScript separately
display(Javascript(js_content))